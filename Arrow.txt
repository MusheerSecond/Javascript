Arrow Functions : 
	-> An arrow function expression has a shorter syntax than a function expression and does not bind its own this, arguments, super, or
	   new.target. 
	-> These function expressions are best suited for non-method functions(Functions of an object).
	-> They cannot be used as constructors and will throw an error when used with new.


	Note : 
	   -> An arrow function does not create its own this; the this value of the enclosing execution context is used. (i.e) But the "this" or "arguments" is accessible ONLY because of closure. (i.e) As a standalone it does not have acces to any of these. (e.g) try "arguments" inside of an arrow function at the global level. 
	   -> Also, if it is created at one function and executed at another function(diff value of "this"), "this" will point to the value of the first function(Just the basics of Closure).
	   -> Given that this is lexical, strict mode rules with regard to this are ignored. All other strict mode rules apply normally.
           -> Since "this" is not bound in arrow functions, the methods call() or apply() can only pass in parameters. "this" is ignored.
	   -> Returning object literals using the concise syntax params => {object:literal} will not work as expected. We can get around this by wraping the object literal in parentheses.
	   -> Arrow functions do not have a prototype property.(Present by default for all functions).
	   -> The yield keyword may not be used in an arrow function's body (except when permitted within functions further nested within it). As a consequence, arrow functions cannot be used as generators.
