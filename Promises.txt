Info : 

	-> They aim to solve a lot of problems that come up when we have a lot of asyncronous code in our application.
	-> Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.
	-> This can help us get rid of "classic-callback-pyramid-of-doom".(Nested Hierarchy callbacks)
	-> This can be called seperately in any number of places(using "then").(Outside of chaining)

	-> It contains the code which initiates the async functionality(http request, db request) and also calling of resolve(positive) and reject(negative) functions based on the result of async call.
	-> This is better, bacause it makes the code more composable and readable.

Promise.reject : 

	-> The static Promise.reject function returns a Promise that is rejected. For debugging purposes and selective error catching,
	   it is useful to make reason an instanceof Error.

Chaining : 

	-> A common need is to execute two or more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step("classic-callback-pyramid-of-doom").
	(e.g Loading js files(with dependency) like a hierarchy)
	-> This is accomplished by returning a new promise(by default promise is returned by "then") from either the success or failure callback of the "then" function.
	
	"then" in promise : 
		
		-> The "then" method returns a Promise which allows for method chaining. It takes up to two arguments: callback functions for the success and failure cases of the Promise.	
		-> The value of Promise which "then" returns depends on the return value of its handlers.

			* returns a value, the promise returned by then gets resolved with the returned value as its value;
			* throws an error, the promise returned by then gets rejected with the thrown error as its value;
			* returns an already resolved promise, the promise returned by then gets resolved with that promise's value as its value;
			* returns an already rejected promise, the promise returned by then gets rejected with that promise's value as its value.
			* returns another pending promise object, the resolution/rejection of the promise returned by then will be subsequent to the resolution/rejection of the promise returned by the handler. 
			  Also, the value of the promise returned by then will be the same as the value of the promise returned by the handler.
		
		-> If the handler of "then"/"catch", does not return any value, the value for the Promise returned by "then"/"catch" will be "undefined".
		-> The Promise returned by "then" is not the same promise that caused its execution.(It does not modify the original promise value)
		   (i.e) If a promise that called "then" is called again later, the promise value will be the same as it was Originally before, 
		   irrespective of whatever happens in the first "then" call.
		-> A then call will return a rejected promise if the function throws an error or returns a rejected Promise.
		   In all other cases, a resolving Promise is returned(i.e also from a reject handler).

		***
		Notes : 
			-> In all the above cases, the same promise is returned(as it would be normally returned by "then"), 
			   except for the value changes of that promise. For the last case, "then" depends on 
			   the "new Promise" for resolution/rejection.
			
	"catch" in Promise : 		
	
		-> The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected).
		-> A catch call will return a rejected promise if the function throws an error or returns a rejected Promise.
		   In all other cases, a resolving Promise is returned.
		-> The "catch" returns a Promise even if its handler is not executed.(The resolved Promise called on "catch" is returned with same value). 

		Notes : 
			-> Internally calls Promise.prototype.then(undefined, handler).


	Chaining after a catch : 

		-> It's possible to chain after a failure, i.e. a catch, which is useful to 
	   	   accomplish new actions even after an action failed in the chain.(just like final, but functionality is same as a returned promise from "then/catch")


Notes : 

	-> A Function that returns a promise can be used to abstract out 
		-> the ASYNC functionality, 
		-> calling resolve and reject
	   of the Current Promise.
	-> More advanced version of above can be like a function returning a promise, which in turn
	   gets that promise from execution("then") of a promise based API(like ajax).(e.g return fetch("sample.js").then((resp) => resp)).
	-> catch(failureCallback) is short for then(null, failureCallback).  This is USEFULL when we want only a single error handling function for a series of promises.   
	-> it is often desirable to catch rejected promises rather than use then's two case syntax.
	**
	-> The handler function (onFulfilled or onRejected) gets called asynchronously (as soon as the stack is empty). 
	   Also, it is only pushed to the Callback Queue after the Promise is resolved/rejected.
	-> Basically, a promise chain stops if there's an exception, looking down the chain for catch handlers instead.  
	-> Only the first call to resolve or reject  inside of a promise is considered. Any other sub-sequent calls either same or different will be ignored.   
	   This includes errors thrown after resolve is called.
	-> Errors thrown inside asynchronous functions(e.g setTimeout) will act like uncaught errors

Advantages : 

	-> Callbacks will never be called before the completion of the current run of the JavaScript event loop.
	-> Callbacks added with .then even after the success or failure of the asynchronous operation, will be called.
	-> Multiple callbacks may be added by calling .then several times, to be executed independently in insertion order.


////////////////////////////////////////////////////
Note : 
	Start looking from "Error propagation"
