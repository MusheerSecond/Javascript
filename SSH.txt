Notes:


1 ->  SSH or Secure shell, is a protocol from connecting one computer to another, usually in order to use the command line interface or command shell(on a remote system)

2 -> Used for many purposes like deployment, software update etc..

3 -> It is just like sitting in front of a REMOTE computer, but instead of being in a data-center or a near the actual server., we can connect it from anywhere.

4 -> The most important thing is, the remote machine we are trying to log in to must have an ssh server running and listening(default port 22)

4 -> There are ssh clients, the software we use it to connect to the ssh server.(mac os and linux have the ssh application built-in accessible through the terminal)

5 -> SSh is a service that starts up after a large part of the remote system comes online after booting-up. (i.e not available immediately on bootup)

6 -> With SSH access is controlled either by username and password setup by an administartor in the remote server or using a cryptographic key pair, generated by the user and shared with the server(public key - secure).

7 -> SSH encrypts the connection between the client and the server.(secure)

8 -> Usually it runs on TCP port - 22(can be changed)

9-> we get three incorrect attempts to connect to the ssh server.

10 -> when connecting for the first time, we will be acked to accppt the server's host key. This will be saved in the file named known_hosts inside of the .ssh folder.

11 ->  if the host key has changed due to some reason.(e.g ssh installation changes), then we may have ti delete the entry in the known_hosts file for that ip address, and then re-connect again.(the host key will now be newly saved)

11 -> if the ssh is running on a port other than the port 22(default), we can use the -p to explicitly set the port no.

****************
12 -> we can login to the remote/another machine using the ssh username/password(of the remote machine - NOT ANY OF OUR USERNAME/PASSWORD(not even the ssh username)) or the ssh key-pair.

13 -> In order to login using the ssh keys, we have to add the ssh public key to the authorized_keys file inside of the .ssh folder of the remote host.

13 -> the authorized_keys file inside of the .ssh folder, contains all the keys(ssh public keys)  that are allowed to access this machine via ssh.

14 -> we can connect to the remote machine using the ssh private key(ofcourse after adding the public key to the authorized_keys file of the remote machine), by 
      ssh -i path_to_private_key user@host

15 -> we can make this even simpler by using the config file inside of the ssh folder.
      e.g Host host_alias
            User user_name
            HostName host_name
            IdentityFile path_to_private_key


Generating a key-pair(public-private):
  -> we can avoid using username and password for logging in when using ssh server by using a public-private key set up.

  -> ssh-keygen -t rsa        // -t = type as rsa encryption algorithm

copy the public key to the server:
  -> ssh-copy-id username@hostname      (linux)
  -> this will copy the key information directly into the suthorized keys file on the REMOTE server.

  Note:
    -> The passphrase(optional) used is only used to unlock the key and not to  be used to login into remote systems. because if the private key is stolen anyone with that file can logon to the remote servers as you. thus passphrase is used as a means to setting password/activate the key.
    -> This passphrase has to be given every time we want to use the key for logging into servers.



Synatx:
  -> ssh username@hostname/address



  Note:
    -> if we don't specify the username, ssh assumes we want to use the same username that we are using on the local computer.
    -> username can also be specified as -l username


1 -> in /etc/hosts file if we write a ip address, we dont have to write it again and again

2 -> 



Note:
  -> We can change setting while using ssh, that can prevent us from being logg back-in.




SCP:

  -> This command is used to copy contents from one server to the another server.
  -> SCP is only for transferring files, and can't do other things like list remote directories or removing files, which SFTP does do.

  Synatx:
    scp path_to_file user@host_to_copy:
     or 
    scp path_to_file user@host_to_copy:path_to_store_in_remote
      or 
    scp user@host_to_copy_from:path_to_file_in_remote path_to_store_file_in_local           // reverse of above command


    
    This copies the file into the home folder of the host_to_copy

    Note:
      -> The : in the end is inportant.

SFTP:
  -> SFTP is a file transfer protocol similar to FTP but uses the SSH protocol as the network protocol(and benefits from leaving SSH to handle the authentication and encryption).
  -> This runs on the ssh port and is encrypted.
  -> The main disadvanatge of this is that we have to connect to the remote host to copy the file whereas we can use scp to directly copy the files(to and from)


  Note:
    -> Filezilla is a gui client that supports sftp.


Tunneling:

  -> We can forward ports from a local machine to a remote machine.
  -> Any request that comes to the specified port in the local machine, will be sent through the network to the ssh server on the remote machine and a request will be made to the 
     specified ip and port(host_ip:host_port) from the host machine.
  -> The ssh will take what sent to one port(local machine), send it through an ssh connection and sent it to a port on the remote server(may be local host or some other port which the remote machine has access to).
  -> This can be used to connect to a database in the host_machine or any other machine which it has access to(specified in the host_ip:host_port section)

  Syntax:
    ssh -L port_in_local:host_ip:host_port username@host_name

    Note:
      -> -L is used to specify local port forwarding.
      -> using localhost as the host_ip, actually means the localhost on the host_machine(not our machine) which is the machine itself.