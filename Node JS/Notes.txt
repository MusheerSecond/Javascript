1 -> The Node equivalent of window in browser is "global" and the document equivalent is a "process"

2 -> A Simple Node application does not need to have a package(having package.json file).

3 -> All the code we write in any node js file is actually wrapped inside of a function with parameters such as exports, module, require and other params. This is what prevents the code from actually polluting the global environment.
     This is also the reason why we get access to variables like module, exports, require etc. in each and every file. Also, at the end of that function, node "returns" the module.exports object which will be available in places where it is required.
     Actual wrapper function : 
        function (exports, require, module, __filename, __dirname) {}

4 -> The exports and module.exports are variables referencing to the same object. Thus, exports should only be used for modification on the object and not for assigning a new value.Since, Node.js is going to send back module.exports only.

4 -> The module.exports or exports is a special object which is included in every JS file in the Node.js application by default. module is a variable that represents current module and exports is an object that will be exposed as a module. So, whatever you assign to module.exports or exports, will be exposed as a module.

5 -> By default, module.exports is an "Object".

6 -> We can also create a new module inside of our main module/project(it will have its own package.json file and dependencies)

7 -> we can execute any command using nodemon by using the command "nodemon --exec '<any_command_to_execute>'". This is used while running test scripts through nodemon.

8 -> To guard against crashing the Node.js process, a listener can be registered on the process object's uncaughtException event. i.e process.on('uncaughtException', (err) => {});

9 -> If we require an already required module, then the exact same object is returned(file/module is not re-executed)