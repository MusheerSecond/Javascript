Node.js : 

	-> 



Note : 
	-> The Javascript executed in the Browser and the Node is actually running on the same exact Runtime Engine called the V8 Javascript Runtime Engine(Chrome).(Node has this enging packed within itself).	
	-> The V8 Runtime engine takes plain javascript code and compiles it into much faster machine code and executes it.
	-> The V8 engine is written in C++ Code. 


Module : 

	-> Module in Node.js is a simple or complex functionality organized in single or 
	   multiple JavaScript files which can be reused throughout the Node.js application.
	-> Each module in Node.js has its own context, so it cannot interfere with other 
	   modules or pollute global scope. Also, each module can be placed in a separate .js file under a separate folder.   

	-> Module Types, Node.js includes three types of modules:

		-> Core Modules
		-> Local Modules
		-> Third Party Modules   

		-> Node.js Core Modules:

			->  These core modules are compiled into its binary distribution and load automatically when Node.js process starts. However, you need to import the core module first in order to use it in your application.

What is require() : 

	-> The "require" function is the easiest way to include modules that exist in separate files.
	-> The basic functionality of "require" is that it reads a javascript file, EXECUTES the file, and then proceeds to return the exports object	
	-> Each time you subsequently require an already-required file, the exports object is cached and reused.
	-> The rules of where require finds the files can be a little complex, but a simple rule of thumb is that if the file doesn't start with "./" or "/", then it is either considered a core module (and the local Node path is checked), or a dependency in the local node_modules folder. If the file starts with "./" it is considered a relative file to the file that called require. If the file starts with "/", it is considered an absolute path. 
	-> We can "require" either a Single file or a module as a whole(both user created).
	-> While requiring a module(User Created) instead of a file, we can actually specfiy only the module name/folder. The "require" wil read the package.json file of the module for "main" key or index.js by default.

	NOTE: 
		-> "require" is automatically available in all node js files.
		-> you can omit ".js" and "require" will automatically append it if needed.
		-> When we only specify the module name, the "require" is going to look in to the core modules, if not then in the node_modules folder(third party modules).(i.e if we were to use a third party module with same name as core, it will not work as expected)

Events: 
	-> Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called "emitters")
	   periodically emit named events that cause Function objects ("listeners") to be called.
	-> Using eventEmitters from the events object, we can 
			* create custom events
			* register listeners to listen to events,(also creation of custom events is in this step too)
			* emit any events(standard and custom). 
	-> All objects that emit events are INSTANCES of the EventEmitter class. (i.e we can use any custom class extend eventEmitter to interit its properties and behaviour).
	-> When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously.
	-> Any values returned by the called listeners are ignored and will be discarded.
	-> The standard "this" keyword is intentionally set to reference the EventEmitter to which the listener is attached.(arrow function is an exception)
	-> All EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when existing listeners are removed.
	-> When an error occurs within an EventEmitter instance(inside of any actual functions belonging to the EventEmitter), the typical action is for an 'error' event to be emitted. 
	-> If an EventEmitter does not have at least one listener registered for the 'error' event, and an 'error' event is emitted,
	   the error is thrown, a stack trace is printed, and the Node.js process exits.
	   
Buffers:
	-> It is just a temporary storage spot for a chunk of data that is being transfered from one place to another.
	-> The buffer is filled with data and then passed along. Using this we can transfer samll chunks of data at a time.
	-> When the buffer is full, the data can be passed on and processed by the client.(i.e The client can start consuming/using data even before its all arrived)

Stream:
	-> This can be considered as a pipeline for the data to flow through. The data flows through the stream into the buffer, which collects samll chunks of data together.
	   And, when the buffer is full, it passes that small chunk of data through the stream to be sent/processed by the client.(like video streaming)

Types of streams:
	-> Read Stream			// fs.createReadStream
	-> Write Stream			// fs.createWriteStream
	-> Duplex Stream 		// Does both read and write	

Pipes:
	-> 	